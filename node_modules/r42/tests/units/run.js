'use strict';

require('../helpers/dotry');

var path = require('path');
var chai = require('chai');
var expect = chai.expect;
var sinon = require('sinon');
var sinonChai = require('sinon-chai');
chai.use(sinonChai);
var run = require('../../lib/run');

describe('run', function () {
  it('is an object', function () {
    expect(run).to.be.an('Object');
  });

  describe('::runString', function () {
    it('is a function', function () {
      expect(run.runString).to.be.a('Function');
    });

    it('calls the provided callback with a SyntaxError if the provided ' +
      'javascript is invalid', function () {
      run.runString('test.js', 'invalidCode(', null, function (err) {
        expect(err.constructor.name).to.be.eql('SyntaxError');
      });
    });

    it('calls the provided callback with a null if execution goes well', function () {
      run.runString('test.js', '42', null, function (err) {
        expect(err).to.be.null;
      });
    });

    it('automatically provides the global environment in the execution env', function () {
      run.runString('test.js', 'process.env.NODE_ENV = "toto"', null, function (err) {
        expect(err).to.be.null;
      });
    });

    it('calls the provided callback with a ReferenceError if the provided' +
      'javascript uses an invalid global variable', function () {
      run.runString('test.js', 'testEnv.super = 42', null, function (err) {
        expect(err.constructor.name).to.be.eql('ReferenceError');
      });
    });

    it('merges the provided environment into the execution env', function () {
      run.runString('test.js', 'testEnv.super = 42', {
        testEnv: {},
      }, function (err) {
        expect(err).to.be.null;
      });
    });
  });

  describe('::runFile', function () {
    beforeEach(function () {
      sinon.spy(run, 'runString');
    });
    afterEach(function () {
      run.runString.restore();
    });

    it('is a function', function () {
      expect(run.runFile).to.be.a('Function');
    });

    it('returns an error if given an invalid file path', function (done) {
      run.runFile('unknown.js', null, function (err, res) {
        expect(err).to.be.an.instanceOf(Error);
        expect(err.message).to.be.eql('Error reading file unknown.js');
      }.dotry(done, true));
    });

    it('calls run.runString with file content', function (done) {
      var filepath = path.join(__dirname, 'run.txt');
      run.runFile(filepath, null, function (err, res) {
        expect(err).to.not.exist;
        expect(run.runString).to.have.been.calledOnce.and
        .to.have.been.calledWithMatch(
          filepath,
          '"42 is cool"'
        );
      }.dotry(done, true));
    });
  });
});
