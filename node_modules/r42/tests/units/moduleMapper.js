'use strict';

var _ = require('lodash');

var expect = require('chai').expect;
var ModuleMapper = require('../../lib/moduleMapper');

describe('ModuleMapper', function () {
  it('is a function', function () {
    expect(ModuleMapper).to.be.a('Function');
  });

  it('throws an error if called without arguments', function () {
    var fn = function () {
      ModuleMapper();
    }
    expect(fn).to.throw(Error, '[r42] moduleMapper: invalid config object');
  });

  it('throws an error if first argument is invalid', function () {
    var fn = function () {
      ModuleMapper(42);
    }
    expect(fn).to.throw(Error, '[r42] moduleMapper: invalid config object');
  });

  it('instantiate a new ModuleMapper when called with new', function () {
    var res = null;
    var fn = function () {
      res = new ModuleMapper({
        baseDir: 'test',
      });
    }
    expect(fn).not.to.throw();
    expect(res).to.be.an.instanceOf(ModuleMapper);
  });

  it('instantiate a new ModuleMapper when called without new', function () {
    var res = null;
    var fn = function () {
      res = ModuleMapper({
        baseDir: 'test',
      });
    }
    expect(fn).not.to.throw();
    expect(res).to.be.an.instanceOf(ModuleMapper);
  });

  it('contains a $paths attribute with as much elements in it as ' +
    'in the given paths configuration attribute', function () {
    var paths = {
      'test1': '_test1',
      'test2': '_test2',
      'test3': '_test3',
    }
    var mm = ModuleMapper({
      paths: paths,
    });

    expect(_.size(mm.$paths)).to.be.eql(_.size(paths));
  });

  it('sets a regexp in every $paths.from attributes', function () {
    var paths = {
      'test1': '_test1',
      'test2': '_test2',
      'test3': '_test3',
    }
    var mm = ModuleMapper({
      paths: paths,
    });

    expect(_.every(paths, function (path) {
      return _.isRegExp(path.from);
    }));
  });

  it('copy each path\'s value to $paths.to', function () {
    var paths = {
      'test1': '_test1',
      'test2': '_test2',
      'test3': '_test3',
    }
    var mm = ModuleMapper({
      paths: paths,
    });

    expect(_.values(paths)).to.be.deep.eql(_.map(mm.$paths, 'to'));
  });

  describe('#resolve', function () {
    var paths = {
      'test1': '_test1',
      'test2': '_test2',
      'test3': '_test3',
    }
    var mm = ModuleMapper({
      paths: paths,
    });

    it('is a function', function () {
      expect(mm.resolve).to.be.a('Function');
    });

    it('does nothing to a name that is not found in configured paths', function () {
      expect(mm.resolve('test')).to.be.eql('test');
    });

    it('replaces name with given value if name matches exactly a ' +
      'configured path\'s name', function () {
      expect(mm.resolve('test2')).to.be.eql('_test2');
    });

    it('does nothing to a name containg a configured path name', function () {
      expect(mm.resolve('test11')).to.be.eql('test11');
    });

    it('replaces part of name if it matches perfectly from first char and' +
      'the first char not matching is /', function () {
      expect(mm.resolve('test1/1')).to.be.eql('_test1/1');
    });

    it('does nothing to a name if it does not match from the first char', function () {
      expect(mm.resolve('t/test1/1')).to.be.eql('t/test1/1');
    });
  });
});
