'use strict';

var fs = require('fs');
var path = require('path');

var _ = require('lodash');

var run = require('./run');
var ModuleMapper = require('./moduleMapper');

function ModuleContext(config, define) {
  if (!(this instanceof ModuleContext)) {
    return new ModuleContext(config, define);
  }

  if (!_.isObject(config) || !config.baseDir) {
    throw new Error('[r42] ModuleContext: invalid config object');
  }

  if (!_.isFunction(define)) {
    throw new Error('[r42] ModuleContext: invalid define function');
  }

  this.$modules = {};
  this.$baseDir = config.baseDir;
  this.$mm = new ModuleMapper(config);
  this.$define = define;
}

ModuleContext.prototype.addModule = function (resolvedName, moduleFn, callback) {
  if (resolvedName in this.$modules) {
    throw new Error('[r42] ModuleContext: impossible to redefine already existing module ' +
      resolvedName);
  }
  this.$modules[resolvedName] = null;
  moduleFn(function (err, module) {
    if (err) {
      return callback(err);
    }
    callback(null, this.$modules[resolvedName] = module);
  }.bind(this));
};
ModuleContext.prototype.getModule = function (name, callback) {
  name = this.$mm.resolve(name);
  if (name in this.$modules) {
    return callback(null, this.$modules[name]);
  }

  var modulePath = path.join(this.$baseDir, name + '.js');
  if (fs.exists(modulePath, function (exists) {
    if (!exists) {
      return callback(null, require(name));
    }

    var defineCalled = false;

    var define = _.createCallback(
      _.partial(
        _.partialRight(
          this.$define, function (err) {
            callback(err, this.$modules[name]);
          }.bind(this)
        ),
        name
      ),
      null,
      2
    );

    run.runFile(modulePath, {
      define: function () {
        if (defineCalled === true) {
          throw new Error('[r42] ModuleContext: define must be called only once ' +
            'per module but was called twice in ' + name);
        }
        defineCalled = true;
        define.apply(null, arguments);
      }
    }, function (err) {
      if (err) {
        throw err;
      }
      if (!defineCalled) {
        throw new Error('[r42] ModuleContext: define not called by module ' + name);
      }
    });
  }.bind(this)));
};
ModuleContext.prototype.removeModule = function (resolvedName) {
  delete this.$modules[resolvedName];
};

module.exports = ModuleContext;
